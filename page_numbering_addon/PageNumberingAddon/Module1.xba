<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic" script:moduleType="normal">&apos; 
&apos; ▛▀▖         ▙ ▌       ▌        ▗       
&apos; ▙▄▘▝▀▖▞▀▌▞▀▖▌▌▌▌ ▌▛▚▀▖▛▀▖▞▀▖▙▀▖▄ ▛▀▖▞▀▌
&apos; ▌  ▞▀▌▚▄▌▛▀ ▌▝▌▌ ▌▌▐ ▌▌ ▌▛▀ ▌  ▐ ▌ ▌▚▄▌
&apos; ▘  ▝▀▘▗▄▘▝▀▘▘ ▘▝▀▘▘▝ ▘▀▀ ▝▀▘▘  ▀▘▘ ▘▗▄▘
&apos; This is an addon to ease page numbering.

Option Compatible &apos;For multiline comments

global Continue as integer
global oDlg As Object
global NumberingDecorationComboBox,PositionListBox,AlignmentListBox,FirstNumberedPage,FirstNumberedIndex,FontUsed,FontSize,NumberingTypeComboBox
global FontNameList()
global Doc as Object
global NumTypeCollection As New Collection 

Sub Main()
	Dim oLib as Object, myDlg as Object
	Dim oListenerTop as Object
	Dim FontSelected 
	Dim PageNumber as Object
	Dim UndoManager1,UndoManager2 as Object
	
	Doc = ThisComponent

	UndoManager1 = Doc.getUndoManager()

	DialogLibraries.LoadLibrary(&quot;PageNumberingAddon&quot;)
	oLib = DialogLibraries.GetByName(&quot;PageNumberingAddon&quot;)
	myDlg = oLib.GetByName(&quot;PageNumberingDialog&quot;)
	oDlg = CreateUnoDialog(myDlg)

	Continue = 1 &apos; 1 for open window | 0 for cancel | 2 for ok

	oListenerTop = createUnoListener(&quot;TopListen_&quot;, &quot;com.sun.star.awt.XTopWindowListener&quot;)
	oDlg.addTopWindowlistener(oListenerTop) 

	do while Continue = 1 &apos;if still open 
		oDlg.setVisible(true)
		wait 20
	loop

	if Continue = 2 then &apos;Do nothing and proceed to next steps for page numbering
	else					&apos; Cancel or X was selected abort mission
		oDlg.removeTopWindowListener(oListenerTop) &apos; Remove window listener when we are done
   		Exit Sub
	end if
	
	ViewCursor = Doc.CurrentController.getViewCursor()

&apos; Set alignment according to AlignmentListBox dialog field
	AlignmentEnum = AlignmentListBox.SelectedItems(0)	&apos; when having Listbox we get only one selection
	if AlignmentEnum = 2 then AlignmentEnum  = AlignmentEnum +1 &apos;center align for paradjust to overcome BLOCK option

&apos; Page Number Setup
	PageNumber = Doc.createInstance(&quot;com.sun.star.text.textfield.PageNumber&quot;)
	PageNumber.NumberingType = NumTypeCollection(NumberingTypeComboBox.Text) &apos;Just ARABIC numbering for now till implementation
	PageNumber.SubType = 1 &apos; Which page does the textfield refer to
	
	PageStyles = Doc.StyleFamilies.getByName(&quot;PageStyles&quot;)
	StdPage = PageStyles(&quot;Standard&quot;)  &apos;Whatever is Standard will get numbering
	
	FontSelected = FontUsed.SelectedItems(0)
	
&apos; Decide where page numbering should be placed (Header || Footer)
	if PositionListBox.SelectedItems(0) = 0 then 
		StdPage.HeaderIsOn = True
		Num_Position = StdPage.HeaderText
	else
		StdPage.FooterIsOn = True
		Num_Position = StdPage.FooterText
	end if
	NumCursor = Num_Position.Text.createTextCursor() &apos; For text insertion a Text cursor is needed

&apos; Those complex operations of adding page number and styles are included in one undo stack operation named as following
	
	UndoManager1.enterUndoContext(&quot;Page Numbering&quot;)	&apos;There should be included all thos changing operations that should be put in undo stack
		
&apos; Way to set page style in whole document 
&apos; From page 1 to next page break (in this example to the end of the document) apply desc Style
&apos; At first all pages are considered unumbered
	ViewCursor.jumpToPage(1)
	ViewCursor.PageDescName = &quot;Index&quot;

&apos; Begin numbering after n-th page with n given by FirstNumberedPage dialog field
	ViewCursor.jumpToPage(FirstNumberedPage.Value) 

&apos; Set index of first numbered page 
&apos; We cannot use PageNumber.Offset property because we may need bigger than total page number indexing
	ViewCursor.PageNumberOffset = FirstNumberedIndex.Value

&apos; Every numbered page will be of Standard Page style for now
	ViewCursor.PageDescName = &quot;Standard&quot;
	
	NumCursor.ParaAdjust = AlignmentEnum
	NumCursor.CharFontName = FontNameList(FontSelected)
	NumCursor.CharHeight = FontSize.Value
	

&apos; Could construct the whole object on one call in the future
	Select Case NumberingDecorationComboBox.Text
		Case &quot;#&quot;
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
		Case &quot;-#-&quot;
			Num_Position.insertString(NumCursor, &quot;-&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;-&quot;, False)
		Case &quot;[#]&quot;
			Num_Position.insertString(NumCursor, &quot;[&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;]&quot;, False)
		Case &quot;(#)&quot;
			Num_Position.insertString(NumCursor, &quot;(&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;)&quot;, False)
		Case Else
			Print &quot;Custom decoration unimplemented feature&quot;
	End Select
	UndoManager1.leaveUndoContext()
	oDlg.removeTopWindowListener(oListenerTop)	&apos; Remove window listener when we are done
End Sub 

sub TopListen_WindowClosing
	Continue=0
end sub
sub TopListen_OK
	Continue=2
end sub

sub changeTest
		FirstNumberedIndex.Value = FirstNumberedPage.Value
end sub
sub  TopListen_windowOpened(e As Object)
	&apos; Initialize all fields with default values
	Dim oDialog1Model
	Dim oDialog1
	Dim ListFontsRet() 
	Dim FontUtilityList() 	
	Dim DefaultFontIndex
	
	oDialog1 = e.Source	
	oDialog1Model = oDialog1.Model  &apos;Load the Model of the Dialog

	NumberingDecorationComboBox = oDialog1Model.getbyname(&quot;NumberingDecoration&quot;)
	
	NumberingTypeComboBox = oDialog1Model.getbyname(&quot;NumberingTypeSelect&quot;)

	&apos; Create collection with preficed numberingstyle values /Maybe macros instead of integers in future/
	NumTypeCollection.Add(&quot;3&quot; , &quot;i,ii,iii,...&quot;)	
	NumTypeCollection.Add(&quot;2&quot; , &quot;I,II,III,... &quot;)	
	NumTypeCollection.Add(&quot;4&quot; , &quot;1,2,3,...&quot;)
	NumTypeCollection.Add(&quot;52&quot; , &quot;Α,Β,Γ,... &quot;)
	NumTypeCollection.Add(&quot;53&quot; , &quot;α,β,γ,...&quot;)
	NumTypeCollection.Add(&quot;10&quot;, &quot;a...aa...aaa&quot;)
	NumTypeCollection.Add(&quot;9&quot;,&quot;A...AA...AAA &quot;)
	NumTypeCollection.Add(&quot;1&quot;,&quot;a,b,c,...&quot;)
	NumTypeCollection.Add(&quot;0&quot;,&quot;A,B,C,... &quot;)

	PositionListBox = oDialog1Model.getbyname(&quot;Position&quot;)
	PositionListBox.StringItemList= Array(&quot;Επικεφαλίδα&quot;,&quot;Υποσέλιδο&quot;) &apos;alignment
	PositionListBox.SelectedItems = Array(1) &apos;Default selection

	AlignmentListBox = oDialog1Model.getbyname(&quot;Alignment&quot;)
	AlignmentListBox.StringItemList= Array(&quot;Αριστερά&quot;,&quot;Δεξιά&quot;,&quot;Κέντρο&quot;) 
	AlignmentListBox.SelectedItems = Array(2) &apos;Default selection
	
	FirstNumberedPage = oDialog1Model.getbyname(&quot;First_Numbered_Page&quot;)
	FirstNumberedIndex = oDialog1Model.getbyname(&quot;First_Numbered_Index&quot;)
	FirstNumberedPage.Value = 1	&apos;Default first page value is 1
	FirstNumberedIndex.Value = 1 &apos;Default first page index is 1	
	
	FirstNumberedPage = oDialog1Model.getbyname(&quot;First_Numbered_Page&quot;)
	FirstNumberedIndex = oDialog1Model.getbyname(&quot;First_Numbered_Index&quot;)
	FirstNumberedPage.Value = 1	&apos;Default first page value is 1
	FirstNumberedIndex.Value = 1 &apos;Default first page index is 1	
	
	FontUsed = oDialog1Model.getbyname(&quot;FontSelect&quot;)

&apos; Get the default paragraph font from Standard paragraph style 
	ParaStyles = Doc.StyleFamilies.getByName(&quot;ParagraphStyles&quot;) 
	StdPara = ParaStyles(&quot;Standard&quot;)
	DefaultFontSearch = StdPara.CharFontName
	
	
&apos; Call ListFonts() with the search string to get the required index in FontsUsed string item array
	ListFontsRet() = ListFonts(Doc,DefaultFontSearch)
	
&apos; ListFonts returns a tuple, the first element is the string item array for dropdown list elements (FontUtilityList)
&apos; the second element is the index of the queried font for dropdown default setting (DefaultFontIndex)
	FontUtilityList() = ListFontsRet(0)
	
	DefaultFontIndex = ListFontsRet(1)
	
	FontUsed.StringItemList =  FontUtilityList()

	FontUsed.SelectedItems = Array(DefaultFontIndex)
	FontNameList = FontUtilityList()
	
	FontSize = oDialog1Model.getbyname(&quot;FontSize&quot;)
	FontSize.Value = StdPara.CharHeight &apos; Get default char size/height from Standard Paragraph style
end sub
&apos; Unused window Listeners for now
sub  TopListen_windowClosed
end sub
sub TopListen_windowMinimized
end sub
sub  TopListen_windowNormalized
end sub
sub  TopListen_windowActivated
end sub
sub  TopListen_windowDeactivated
end sub
sub  TopListen_disposing
end sub

&apos;
&apos;▌  ▗    ▐  ▛▀▘     ▐     
&apos;▌  ▄ ▞▀▘▜▀ ▙▄▞▀▖▛▀▖▜▀ ▞▀▘
&apos;▌  ▐ ▝▀▖▐ ▖▌ ▌ ▌▌ ▌▐ ▖▝▀▖
&apos;▀▀▘▀▘▀▀  ▀ ▘ ▝▀ ▘ ▘ ▀ ▀▀ 
&apos; Return installed fonts, without duplicates and sorted by name on a List
&apos; Core implementation by the incredible Andrew Pitonyak
Function ListFonts(oDoc, SearchString)
  Dim oWindow          &apos;Container window AWT XDevice interface.
  Dim oFonts()         &apos;Array of awt FontDescriptor structures.
  Dim oFinalFonts()    &apos;Font descriptors to return.
  Dim nIndex() As Long &apos;Indirect sorted index into.
  Dim sName$           &apos;Font name.
  Dim i&amp;               &apos;General index variable.
  Dim j&amp;               &apos;General index variable.
  Dim n&amp;               &apos;General utility variable.
  Dim k&amp;               &apos;General utility variable.
  Dim bChanged As Boolean

  oWindow  = oDoc.getCurrentController().getFrame().getContainerWindow()
  oFonts() = oWindow.getFontDescriptors()
  ReDim nIndex(UBound(oFonts()))
  n = UBound(oFonts())
  Dim oReturner(n)
  Dim oName(n)
  Dim oStyle(n)
  Dim SearchIndex
  
  &apos; First, obtain an index into the unique values.
  For i = 0 to n
    nIndex(i) = i
  Next

  &apos; Sort the data!
  For i = 0 To n-1
    bChanged = False
    For j = 1 To n-i
      If oFonts(nIndex(j-1)).Name &gt; oFonts(nIndex(j)).Name Then
        k = nIndex(j-1)
        nIndex(j-1) = nIndex(j)
        nIndex(j) = k
        bChanged = True
      End If
    Next
    If NOT bChanged Then Exit For
  Next
  
  &apos; Copy the font descriptor.
  sName = &quot;&quot;
  oFinalFonts() = DimArray(n)
  j = -1
  For i = 0 To n
    If bDuplicates OR (sName &lt;&gt; oFonts(nIndex(i)).Name) Then
      j = j + 1
      oFinalFonts(j) = oFonts(nIndex(i))
      sName = oFinalFonts(j).Name
      oName(j) = oFonts(nIndex(i)).Name
      if oname(j) = SearchString then 
      	SearchIndex = j 
      endif
    End If
  Next
	
	ReDim Preserve oFinalFonts(j)
	ReDim Preserve oName(j)

  ListFonts =  Array(oName(),SearchIndex) &apos; List that keeps only the sorted names
End Function
</script:module>
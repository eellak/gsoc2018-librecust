<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****

Sub Main

	Dim PageNumber As Object
	
	Doc = ThisComponent
	
	DialogLibraries.LoadLibrary( &quot;PageNumberingAddon&quot; )  &apos;Load the standard Library
	oDialog1 = CreateUnoDialog( DialogLibraries.PageNumberingAddon.PageNumberingDialog )  &apos;Load the existing Practice Dialog
	oDialog1Model = oDialog1.Model  &apos;Load the Model of the Dialog

	NumberingStyleComboBox = oDialog1Model.getbyname(&quot;NumberingStyle&quot;)
	NumberingStyleComboBox.Text = &quot;1&quot;
	NumberingStyleComboBox.StringItemList = Array(&quot;1&quot;,&quot;-1-&quot;,&quot;[1]&quot;,&quot;(1)&quot;) &apos;styles of numbering

	PositionListBox = oDialog1Model.getbyname(&quot;Position&quot;)
	PositionListBox.StringItemList= Array(&quot;Επικεφαλίδα&quot;,&quot;Υποσέλιδο&quot;) &apos;alignment
	PositionListBox.SelectedItems = Array(1) &apos;Default selection

	AlignmentListBox = oDialog1Model.getbyname(&quot;Alignment&quot;)
	AlignmentListBox.StringItemList= Array(&quot;Αριστερά&quot;,&quot;Δεξιά&quot;,&quot;Κέντρο&quot;) 
	AlignmentListBox.SelectedItems = Array(2) &apos;Default selection
	
	FirstNumberedPage = oDialog1Model.getbyname(&quot;First_Numbered_Page&quot;)
	FirstNumberedIndex = oDialog1Model.getbyname(&quot;First_Numbered_Index&quot;)
	FirstNumberedPage.Value = 1	&apos;Default first page value is 1
	FirstNumberedIndex.Value = 1 &apos;Default first page index is 1
	nReturn = oDialog1.Execute()
	&apos;xray oDialog1
	If nReturn = 1 then
	else
   		Exit Sub
	end if

	ViewCursor = Doc.CurrentController.getViewCursor()

&apos; Way to set page style in whole document 
&apos; From page 1 to next page break (in this example to the end of the document) apply desc Style
&apos; At first all pages are considered unumbered
	ViewCursor.jumpToPage(1)
	ViewCursor.PageDescName = &quot;Index&quot;
	
&apos; Begin numbering after n-th page
	ViewCursor.jumpToPage(FirstNumberedPage.Value)

&apos; Set index of first numbered page 
&apos; We cannot use PageNumber.Offset property because we may need bigger than total page number indexing
	ViewCursor.PageNumberOffset = FirstNumberedIndex.Value

&apos; Every numbered page will be of Standard Page style for now
	ViewCursor.PageDescName = &quot;Standard&quot;

	AlignmentEnum = AlignmentListBox.SelectedItems(0)
	if AlignmentEnum = 2 then AlignmentEnum  = AlignmentEnum +1 &apos;center align for paradjust to overcome BLOCK option

&apos; Page Number Setup
	PageNumber = Doc.createInstance(&quot;com.sun.star.text.textfield.PageNumber&quot;)
	PageNumber.NumberingType = com.sun.star.style.NumberingType.ARABIC &apos;Just ARABIC numbering for now till implementation
	PageStyles = Doc.StyleFamilies.getByName(&quot;PageStyles&quot;)
	StdPage = PageStyles(&quot;Standard&quot;)  &apos;Whatever is Standard will get numbering

&apos; Decide where page numbering should be placed
	if PositionListBox.SelectedItems(0) = 0 then 
		StdPage.HeaderIsOn = True
		Num_Position = StdPage.HeaderText
	else
		StdPage.FooterIsOn = True
		Num_Position = StdPage.FooterText
	end if

	NumCursor = Num_Position.Text.createTextCursor()
	NumCursor.ParaAdjust = AlignmentEnum
	
&apos; Could construct the whole object on one call in the future
	Select Case NumberingStyleComboBox.Text
		Case &quot;1&quot;
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
		Case &quot;-1-&quot;
			Num_Position.insertString(NumCursor, &quot;-&quot;, False)
			Num_Position.insertTextContent(NumCursor, &quot;-&quot; &amp; PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;-&quot;, False)
		Case &quot;[1]&quot;
			Num_Position.insertString(NumCursor, &quot;[&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;]&quot;, False)
		Case &quot;(1)&quot;
			Num_Position.insertString(NumCursor, &quot;(&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;)&quot;, False)
		Case Else
			Print &quot;Custom decoration unimplemented feature&quot;
	End Select
End Sub


global Continue as integer
global oDlg As Object
global NumberingStyleComboBox,PositionListBox,AlignmentListBox,FirstNumberedPage,FirstNumberedIndex,FontUsed,FontSize
global FontNameList(), FontStyleNameList()
global Doc as Object
Sub StartDialog()


Dim oLib As Object, myDlg As Object

dim oListenerTop as object

Doc = ThisComponent
DialogLibraries.LoadLibrary(&quot;PageNumberingAddon&quot;)
oLib = DialogLibraries.GetByName(&quot;PageNumberingAddon&quot;)
myDlg = oLib.GetByName(&quot;PageNumberingDialog&quot;)
oDlg = CreateUnoDialog(myDlg)

Continue = 1 &apos; 1 for open window | 0 for cancel | 2 for ok

oListenerTop=createUnoListener(&quot;TopListen_&quot;, &quot;com.sun.star.awt.XTopWindowListener&quot;)
oDlg.addTopWindowlistener(oListenerTop) 

do while Continue = 1 &apos;if still open 
	oDlg.setVisible(true)
	wait 20
	loop

	If Continue = 2 then 
	else
   		Exit Sub
	end if
	
	Dim PageNumber As Object
	
	Doc = ThisComponent
	
	ViewCursor = Doc.CurrentController.getViewCursor()

&apos; Way to set page style in whole document 
&apos; From page 1 to next page break (in this example to the end of the document) apply desc Style
&apos; At first all pages are considered unumbered
	ViewCursor.jumpToPage(1)
	ViewCursor.PageDescName = &quot;Index&quot;
	
&apos; Begin numbering after n-th page
	ViewCursor.jumpToPage(FirstNumberedPage.Value)

&apos; Set index of first numbered page 
&apos; We cannot use PageNumber.Offset property because we may need bigger than total page number indexing
	ViewCursor.PageNumberOffset = FirstNumberedIndex.Value

&apos; Every numbered page will be of Standard Page style for now
	ViewCursor.PageDescName = &quot;Standard&quot;

	AlignmentEnum = AlignmentListBox.SelectedItems(0)
	if AlignmentEnum = 2 then AlignmentEnum  = AlignmentEnum +1 &apos;center align for paradjust to overcome BLOCK option

&apos; Page Number Setup
	PageNumber = Doc.createInstance(&quot;com.sun.star.text.textfield.PageNumber&quot;)
	PageNumber.NumberingType = com.sun.star.style.NumberingType.ARABIC &apos;Just ARABIC numbering for now till implementation
	PageStyles = Doc.StyleFamilies.getByName(&quot;PageStyles&quot;)
	StdPage = PageStyles(&quot;Standard&quot;)  &apos;Whatever is Standard will get numbering

&apos; Decide where page numbering should be placed
	if PositionListBox.SelectedItems(0) = 0 then 
		StdPage.HeaderIsOn = True
		Num_Position = StdPage.HeaderText
	else
		StdPage.FooterIsOn = True
		Num_Position = StdPage.FooterText
	end if

	NumCursor = Num_Position.Text.createTextCursor()
	NumCursor.ParaAdjust = AlignmentEnum
	Dim FontSelected 
	FontSelected = FontUsed.SelectedItems(0)
	NumCursor.CharFontName = FontNameList(FontSelected)
	NumCursor.CharHeight = FontSize.Value

	
&apos; Could construct the whole object on one call in the future
	Select Case NumberingStyleComboBox.Text
		Case &quot;1&quot;
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
		Case &quot;-1-&quot;
			Num_Position.insertString(NumCursor, &quot;-&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;-&quot;, False)
		Case &quot;[1]&quot;
			Num_Position.insertString(NumCursor, &quot;[&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;]&quot;, False)
		Case &quot;(1)&quot;
			Num_Position.insertString(NumCursor, &quot;(&quot;, False)
			Num_Position.insertTextContent(NumCursor, PageNumber, False)
			Num_Position.insertString(NumCursor, &quot;)&quot;, False)
		Case Else
			Print &quot;Custom decoration unimplemented feature&quot;
	End Select

End Sub 

sub TopListen_WindowClosing
	Continue=0
end sub
sub TopListen_OK
	Continue=2
end sub

sub changeTest
		FirstNumberedIndex.Value = FirstNumberedPage.Value
end sub
sub  TopListen_windowOpened(e As Object)
	&apos; Initialize all fields with default values
	Dim oDialog1Model
	Dim oDialog1
	
	oDialog1 = e.Source	
	oDialog1Model = oDialog1.Model  &apos;Load the Model of the Dialog

	NumberingStyleComboBox = oDialog1Model.getbyname(&quot;NumberingStyle&quot;)
	NumberingStyleComboBox.Text = &quot;1&quot;
	NumberingStyleComboBox.StringItemList = Array(&quot;1&quot;,&quot;-1-&quot;,&quot;[1]&quot;,&quot;(1)&quot;) &apos;styles of numbering

	PositionListBox = oDialog1Model.getbyname(&quot;Position&quot;)
	PositionListBox.StringItemList= Array(&quot;Επικεφαλίδα&quot;,&quot;Υποσέλιδο&quot;) &apos;alignment
	PositionListBox.SelectedItems = Array(1) &apos;Default selection

	AlignmentListBox = oDialog1Model.getbyname(&quot;Alignment&quot;)
	AlignmentListBox.StringItemList= Array(&quot;Αριστερά&quot;,&quot;Δεξιά&quot;,&quot;Κέντρο&quot;) 
	AlignmentListBox.SelectedItems = Array(2) &apos;Default selection
	
	FirstNumberedPage = oDialog1Model.getbyname(&quot;First_Numbered_Page&quot;)
	FirstNumberedIndex = oDialog1Model.getbyname(&quot;First_Numbered_Index&quot;)
	FirstNumberedPage.Value = 1	&apos;Default first page value is 1
	FirstNumberedIndex.Value = 1 &apos;Default first page index is 1	
	
	FirstNumberedPage = oDialog1Model.getbyname(&quot;First_Numbered_Page&quot;)
	FirstNumberedIndex = oDialog1Model.getbyname(&quot;First_Numbered_Index&quot;)
	FirstNumberedPage.Value = 1	&apos;Default first page value is 1
	FirstNumberedIndex.Value = 1 &apos;Default first page index is 1	
	
	FontUsed = oDialog1Model.getbyname(&quot;FontSelect&quot;)
	Dim FontUtilityList() 
	FontUtilityList() = ListFonts(Doc, False)
	
	FontUsed.StringItemList =  FontUtilityList()
	FontNameList = FontUtilityList()
	
	FontSize = oDialog1Model.getbyname(&quot;FontSize&quot;)
	FontSize.Value = 12 &apos;Default char size=12
end sub

sub  TopListen_windowClosed
end sub
sub TopListen_windowMinimized
end sub
sub  TopListen_windowNormalized
end sub
sub  TopListen_windowActivated
end sub
sub  TopListen_windowDeactivated
end sub
sub  TopListen_disposing
end sub

&apos;
Function ListFonts(oDoc)
  Dim oWindow          &apos;Container window AWT XDevice interface.
  Dim oFonts()         &apos;Array of awt FontDescriptor structures.
  Dim oFinalFonts()    &apos;Font descriptors to return.
  Dim nIndex() As Long &apos;Indirect sorted index into.
  Dim sName$           &apos;Font name.
  Dim i&amp;               &apos;General index variable.
  Dim j&amp;               &apos;General index variable.
  Dim n&amp;               &apos;General utility variable.
  Dim k&amp;               &apos;General utility variable.
  Dim bChanged As Boolean

  oWindow  = oDoc.getCurrentController().getFrame().getContainerWindow()
  oFonts() = oWindow.getFontDescriptors()
  ReDim nIndex(UBound(oFonts()))
  n = UBound(oFonts())
  Dim oReturner(n)
  Dim oName(n)
  Dim oStyle(n)
  REM First, obtain an index into the unique values.
  For i = 0 to n
    nIndex(i) = i
  Next

  REM Sort the data!
  For i = 0 To n-1
    bChanged = False
    For j = 1 To n-i
      If oFonts(nIndex(j-1)).Name &gt; oFonts(nIndex(j)).Name Then
        k = nIndex(j-1)
        nIndex(j-1) = nIndex(j)
        nIndex(j) = k
        bChanged = True
      End If
    Next
    If NOT bChanged Then Exit For
  Next
  
  REM Copy the font descriptor.
  sName = &quot;&quot;
  oFinalFonts() = DimArray(n)
  j = -1
  For i = 0 To n
    If bDuplicates OR (sName &lt;&gt; oFonts(nIndex(i)).Name) Then
      j = j + 1
      oFinalFonts(j) = oFonts(nIndex(i))
      sName = oFinalFonts(j).Name
      oName(j) = oFonts(nIndex(i)).Name
    End If
  Next
	
	ReDim Preserve oFinalFonts(j)
	ReDim Preserve oName(j)

  ListFonts =  oName()
End Function

</script:module>